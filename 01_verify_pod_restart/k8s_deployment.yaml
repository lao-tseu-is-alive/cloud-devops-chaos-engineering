apiVersion: apps/v1
kind: Deployment                 # Type of Kubernetes resource
metadata:
  name: go-cloud-k8s-info           # Name of the Kubernetes resource
  namespace: chaos-engineering
  labels:
    app: go-cloud-k8s-info
spec:
  replicas: 2                    # Number of pods to run at any given time
  revisionHistoryLimit: 5        # The number of old ReplicaSets to retain to allow rollback
  minReadySeconds: 5             # Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2               # maximum number of pods that can be scheduled above the desired number of pods.
  selector:
    matchLabels:
      app: go-cloud-k8s-info              # This deployment applies to any Pods matching the specified label
  template:                      # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels:                    # The labels that will be applied to all the pods in this deployment
        app: go-cloud-k8s-info
    spec:                        # Spec for the Pod base config, securityContext can be overridden in container
      # kubectl label nodes gok8sw01.lausanne.ch kubernetes.io/role=worker
      # comment the two next lines if you do not have worker nodes (rancher-desktop)
      #nodeSelector:
      #  node-type: worker
      securityContext:           # https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        seccompProfile:
          type: RuntimeDefault   # https://kubernetes.io/docs/tutorials/security/seccomp/
        runAsUser: 12121           # using a non privileged user
        runAsGroup: 12121          # using the group 'gouser' created in Dockerfile
        fsGroup: 100             # by adding fsGroup field, all processes of the container are also part
                                 # of the supplementary group ID 100 (users).
        supplementalGroups:
          - 100
      containers:
      - name: go-cloud-k8s-info
        image: ghcr.io/lao-tseu-is-alive/go-cloud-k8s-info:v0.4.11
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 12121           # using the user 'gouser' created in Dockerfile
          runAsGroup: 12121          # using the group 'gouser' created in Dockerfile
          capabilities:
            drop:
              - 'ALL'
          readOnlyRootFilesystem: true
        ports:
          - containerPort: 8000  # Should match the PORT env variable above  that the Go application listens on
        resources:
          limits:            # resource limit imposed to the pod, the container cannot utilize more res than specified
            cpu: 1000m       # 1000 millicpu or millicores 1 or 100% of a CPU core of a running node
            memory: 128Mi
          requests:          # explicit request of the minimum amount of resources the pod need
            cpu: 100m        # 100 millicpu or millicores 0.1 or 10% of a CPU core of a running node
            memory: 32Mi
        livenessProbe:           # To check the health of the Pod
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 2
        readinessProbe:          # To check if the Pod is ready to serve traffic or not
          httpGet:
            path: /readiness
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 2
        env:
          - name: PORT
            value: "8000"
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: MY_POD_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
